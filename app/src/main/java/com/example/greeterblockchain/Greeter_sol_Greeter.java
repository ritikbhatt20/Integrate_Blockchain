package com.example.greeterblockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class Greeter_sol_Greeter extends Contract {
    private static final String BINARY = "608060405234801562000010575f80fd5b5060405162000bd638038062000bd6833981810160405281019062000036919062000213565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001908162000086919062000499565b50506200057d565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620000ef82620000a7565b810181811067ffffffffffffffff82111715620001115762000110620000b7565b5b80604052505050565b5f620001256200008e565b9050620001338282620000e4565b919050565b5f67ffffffffffffffff821115620001555762000154620000b7565b5b6200016082620000a7565b9050602081019050919050565b5f5b838110156200018c5780820151818401526020810190506200016f565b5f8484015250505050565b5f620001ad620001a78462000138565b6200011a565b905082815260208101848484011115620001cc57620001cb620000a3565b5b620001d98482856200016d565b509392505050565b5f82601f830112620001f857620001f76200009f565b5b81516200020a84826020860162000197565b91505092915050565b5f602082840312156200022b576200022a62000097565b5b5f82015167ffffffffffffffff8111156200024b576200024a6200009b565b5b6200025984828501620001e1565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620002b157607f821691505b602082108103620002c757620002c66200026c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200032b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002ee565b620003378683620002ee565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003816200037b62000375846200034f565b62000358565b6200034f565b9050919050565b5f819050919050565b6200039c8362000361565b620003b4620003ab8262000388565b848454620002fa565b825550505050565b5f90565b620003ca620003bc565b620003d781848462000391565b505050565b5b81811015620003fe57620003f25f82620003c0565b600181019050620003dd565b5050565b601f8211156200044d576200041781620002cd565b6200042284620002df565b8101602085101562000432578190505b6200044a6200044185620002df565b830182620003dc565b50505b505050565b5f82821c905092915050565b5f6200046f5f198460080262000452565b1980831691505092915050565b5f6200048983836200045e565b9150826002028217905092915050565b620004a48262000262565b67ffffffffffffffff811115620004c057620004bf620000b7565b5b620004cc825462000299565b620004d982828562000402565b5f60209050601f8311600181146200050f575f8415620004fa578287015190505b6200050685826200047c565b86555062000575565b601f1984166200051f86620002cd565b5f5b82811015620005485784890151825560018201915060208501945060208101905062000521565b8683101562000568578489015162000564601f8916826200045e565b8355505b6001600288020188555050505b505050505050565b61064b806200058b5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063cfae321714610038578063d28c25d414610056575b5f80fd5b610040610072565b60405161004d919061019f565b60405180910390f35b610070600480360381019061006b91906102fc565b610102565b005b60606001805461008190610370565b80601f01602080910402602001604051908101604052809291908181526020018280546100ad90610370565b80156100f85780601f106100cf576101008083540402835291602001916100f8565b820191905f5260205f20905b8154815290600101906020018083116100db57829003601f168201915b5050505050905090565b80600190816101119190610546565b5050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561014c578082015181840152602081019050610131565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61017182610115565b61017b818561011f565b935061018b81856020860161012f565b61019481610157565b840191505092915050565b5f6020820190508181035f8301526101b78184610167565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61020e82610157565b810181811067ffffffffffffffff8211171561022d5761022c6101d8565b5b80604052505050565b5f61023f6101bf565b905061024b8282610205565b919050565b5f67ffffffffffffffff82111561026a576102696101d8565b5b61027382610157565b9050602081019050919050565b828183375f83830152505050565b5f6102a061029b84610250565b610236565b9050828152602081018484840111156102bc576102bb6101d4565b5b6102c7848285610280565b509392505050565b5f82601f8301126102e3576102e26101d0565b5b81356102f384826020860161028e565b91505092915050565b5f60208284031215610311576103106101c8565b5b5f82013567ffffffffffffffff81111561032e5761032d6101cc565b5b61033a848285016102cf565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061038757607f821691505b60208210810361039a57610399610343565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103c1565b61040686836103c1565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61044a6104456104408461041e565b610427565b61041e565b9050919050565b5f819050919050565b61046383610430565b61047761046f82610451565b8484546103cd565b825550505050565b5f90565b61048b61047f565b61049681848461045a565b505050565b5b818110156104b9576104ae5f82610483565b60018101905061049c565b5050565b601f8211156104fe576104cf816103a0565b6104d8846103b2565b810160208510156104e7578190505b6104fb6104f3856103b2565b83018261049b565b50505b505050565b5f82821c905092915050565b5f61051e5f1984600802610503565b1980831691505092915050565b5f610536838361050f565b9150826002028217905092915050565b61054f82610115565b67ffffffffffffffff811115610568576105676101d8565b5b6105728254610370565b61057d8282856104bd565b5f60209050601f8311600181146105ae575f841561059c578287015190505b6105a6858261052b565b86555061060d565b601f1984166105bc866103a0565b5f5b828110156105e3578489015182556001820191506020850194506020810190506105be565b8683101561060057848901516105fc601f89168261050f565b8355505b6001600288020188555050505b50505050505056fea264697066735822122061e805f2a6cd889d306bfa049d757c540e0bedcc8192d465831fee96cb4dcd3964736f6c63430008170033";

    public static final String FUNC_CHANGEGREETING = "changeGreeting";

    public static final String FUNC_GREET = "greet";

    protected Greeter_sol_Greeter(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Greeter_sol_Greeter(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<Greeter_sol_Greeter> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _greeting) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_greeting)));
        return deployRemoteCall(Greeter_sol_Greeter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Greeter_sol_Greeter> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _greeting) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_greeting)));
        return deployRemoteCall(Greeter_sol_Greeter.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> changeGreeting(String _greeting) {
        final Function function = new Function(
                FUNC_CHANGEGREETING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_greeting)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> greet() {
        final Function function = new Function(
                FUNC_GREET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static Greeter_sol_Greeter load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Greeter_sol_Greeter(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Greeter_sol_Greeter load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Greeter_sol_Greeter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
//    public String processGreetResponse(TransactionReceipt receipt) {
//        List<TransactionReceipt.Log> logs = receipt.getLogs();
//        for (TransactionReceipt.Log log : logs) {
//            List<String> topics = log.getTopics();
//            if (topics != null && !topics.isEmpty() && topics.get(0).equals(EventEncoder.encode(Event.EVENT_GREET))) {
//                List<Type> results = FunctionReturnDecoder.decode(
//                        log.getData(), Arrays.asList(new TypeReference<Utf8String>() {}));
//                if (!results.isEmpty()) {
//                    return (String) results.get(0).getValue();
//                }
//            }
//        }
//        return null; // Handle if the event is not found or doesn't contain the greeting value
//    }
}

